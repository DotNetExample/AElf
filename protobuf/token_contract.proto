syntax = "proto3";

package token;

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "AElf.Contracts.MultiToken";

service TokenContract {
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
    }
    rpc SetSideChainCreator (aelf.Address) returns (google.protobuf.Empty) {
    }
    // Actions
    rpc Create (CreateInput) returns (google.protobuf.Empty) {
    }
    rpc Issue (IssueInput) returns (google.protobuf.Empty) {
    }
    rpc Transfer (TransferInput) returns (google.protobuf.Empty) {
    }
    rpc TransferFrom (TransferFromInput) returns (google.protobuf.Empty) {
    }
    rpc Approve (ApproveInput) returns (google.protobuf.Empty) {
    }
    rpc UnApprove (UnApproveInput) returns (google.protobuf.Empty) {
    }
    rpc Lock (LockInput) returns (google.protobuf.Empty) {
    }
    rpc Unlock (UnlockInput) returns (google.protobuf.Empty) {
    }
    rpc Burn (BurnInput) returns (google.protobuf.Empty) {
    }
    rpc SetPrimaryTokenSymbol (SetPrimaryTokenSymbolInput) returns (google.protobuf.Empty) {
    }
    rpc CrossChainTransfer (CrossChainTransferInput) returns (google.protobuf.Empty) {
    }
    rpc CrossChainReceiveToken (CrossChainReceiveTokenInput) returns (google.protobuf.Empty) {
    }
    rpc CrossChainCreateToken(CrossChainCreateTokenInput) returns (google.protobuf.Empty) {        
    }
    //be used in kernel
    rpc ClaimTransactionFees (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc ChargeTransactionFees (ChargeTransactionFeesInput) returns (aelf.TransactionFee) {
    }
    rpc DonateResourceToken (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc ChargeResourceToken (ChargeResourceTokenInput) returns (aelf.ConsumedResourceTokens) {
    }
    rpc CheckResourceToken (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc CheckThreshold (CheckThresholdInput) returns (google.protobuf.Empty) {
    }
    rpc SetSymbolsToPayTXSizeFee(SymbolListToPayTXSizeFee) returns (google.protobuf.Empty){
    }
    rpc UpdateCoefficientFromContract (CoefficientFromContract) returns (google.protobuf.Empty) {
    }
    rpc UpdateCoefficientFromSender (CoefficientFromSender) returns (google.protobuf.Empty) {
    }
    rpc AddTokenWhiteList (AddTokeWhiteListInput) returns (google.protobuf.Empty) {
    }

    // Views
    rpc GetTokenInfo (GetTokenInfoInput) returns (TokenInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetNativeTokenInfo (google.protobuf.Empty) returns (TokenInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetResourceTokenInfo (google.protobuf.Empty) returns (TokenInfoList) {
        option (aelf.is_view) = true;
    }
    rpc GetBalance (GetBalanceInput) returns (GetBalanceOutput) {
        option (aelf.is_view) = true;
    }
    rpc GetAllowance (GetAllowanceInput) returns (GetAllowanceOutput) {
        option (aelf.is_view) = true;
    }
    rpc IsInWhiteList (IsInWhiteListInput) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    }
    rpc GetLockedAmount (GetLockedAmountInput) returns (GetLockedAmountOutput) {
        option (aelf.is_view) = true;
    }
    rpc GetCrossChainTransferTokenContractAddress (GetCrossChainTransferTokenContractAddressInput) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc GetPrimaryTokenSymbol (google.protobuf.Empty) returns (google.protobuf.StringValue) {
        option (aelf.is_view) = true;
    }
    rpc GetCalculateFeeCoefficientOfContract (aelf.SInt32Value) returns (CalculateFeeCoefficientsOfType) {
        option (aelf.is_view) = true;
    }
    rpc GetCalculateFeeCoefficientOfSender (google.protobuf.Empty) returns (CalculateFeeCoefficientsOfType) {
        option (aelf.is_view) = true;
    }
    // referenced by src
    rpc GetSymbolsToPayTXSizeFee(google.protobuf.Empty) returns (SymbolListToPayTXSizeFee){
        option (aelf.is_view) = true;
    }
}

message TokenInfo {
    string symbol = 1;
    string token_name = 2;
    sint64 supply = 3;
    sint64 total_supply = 4;
    sint32 decimals = 5;
    aelf.Address issuer = 6;
    bool is_burnable = 7;
    bool is_profitable = 8;
    sint32 issue_chain_id = 9;
    sint64 burned = 10;
}

message CreateInput {
    string symbol = 1;
    string token_name = 2;
    sint64 total_supply = 3;
    sint32 decimals = 4;
    aelf.Address issuer = 5;
    bool is_burnable = 6;
    repeated aelf.Address lock_white_list = 7;
    bool is_profitable = 8;
    int32 issue_chain_id = 9;
}

message RegisterNativeTokenInfoInput {
    string symbol = 1;
    string token_name = 2;
    sint64 total_supply = 3;
    sint32 decimals = 4;
    aelf.Address issuer = 5;
    bool is_burnable = 6;
    bool is_profitable = 7;
    sint32 issue_chain_id = 8;
}

message SetPrimaryTokenSymbolInput {
    string symbol = 1;
}

message IssueInput {
    string symbol = 1;
    sint64 amount = 2;
    string memo = 3;
    aelf.Address to = 4;
}

message TransferInput {
    aelf.Address to = 1;
    string symbol = 2;
    sint64 amount = 3;
    string memo = 4;
}

message LockInput {
    aelf.Address address = 1; // The one want to lock his token.
    aelf.Hash lock_id = 2;
    string symbol = 3;
    string usage = 4;
    int64 amount = 5;
}

message UnlockInput {
    aelf.Address address = 1; // The one want to lock his token.
    aelf.Hash lock_id = 2;
    string symbol = 3;
    string usage = 4;
    int64 amount = 5;
}

message TransferFromInput {
    aelf.Address from = 1;
    aelf.Address to = 2;
    string symbol = 3;
    sint64 amount = 4;
    string memo = 5;
}

message ApproveInput {
    aelf.Address spender = 1;
    string symbol = 2;
    sint64 amount = 3;
}

message UnApproveInput {
    aelf.Address spender = 1;
    string symbol = 2;
    sint64 amount = 3;
}

message BurnInput {
    string symbol = 1;
    sint64 amount = 2;
}

message ChargeResourceTokenInput {
    sint64 traffic_cost = 1;
    sint64 storage_cost = 2;
    sint64 read_cost = 3;
    sint64 write_cost = 4;
    aelf.Address caller = 5;
}

message TransactionFeeBill {
    map<string, sint64> token_to_amount = 1;
}

message CheckThresholdInput {
    aelf.Address sender = 1;
    map<string, sint64> symbol_to_threshold = 2;
    bool is_check_allowance = 3;
}

message GetTokenInfoInput {
    string symbol = 1;
}

message GetBalanceInput {
    string symbol = 1;
    aelf.Address owner = 2;
}

message GetBalanceOutput {
    string symbol = 1;
    aelf.Address owner = 2;
    sint64 balance = 3;
}

message GetAllowanceInput {
    string symbol = 1;
    aelf.Address owner = 2;
    aelf.Address spender = 3;
}

message GetAllowanceOutput {
    string symbol = 1;
    aelf.Address owner = 2;
    aelf.Address spender = 3;
    sint64 allowance = 4;
}

message CrossChainTransferInput {
    aelf.Address to = 1;
    string symbol = 2;
    sint64 amount = 3;
    string memo = 4;
    int32 to_chain_id = 5;
    int32 issue_chain_id = 6;
}

message CrossChainReceiveTokenInput {
    int32 from_chain_id = 1;
    int64 parent_chain_height = 2;
    bytes transfer_transaction_bytes = 3;
    aelf.MerklePath merkle_path = 4;
}

message IsInWhiteListInput {
    string symbol = 1;
    aelf.Address address = 2;
}

message SymbolToPayTXSizeFee{
    string token_symbol = 1;
    sint32 base_token_weight = 2;
    sint32 added_token_weight = 3;
}

message SymbolListToPayTXSizeFee{
    repeated SymbolToPayTXSizeFee symbols_to_pay_tx_size_fee = 1;
}

message ChargeTransactionFeesInput {
    string method_name = 1;
    aelf.Address contract_address = 2;
    sint64 transaction_size_fee = 3;
    string primary_token_symbol = 4;
    repeated SymbolToPayTXSizeFee symbols_to_pay_tx_size_fee = 5;
}

message ExtraTokenListModified {
    option (aelf.is_event) = true;
    SymbolListToPayTXSizeFee symbol_list_to_pay_tx_size_fee = 1;
}

message ReturnTaxInput {
    sint64 balance_before_selling = 1;
    aelf.Address return_tax_receiver_address = 2;
}

message GetLockedAmountInput {
    aelf.Address address = 1;
    string symbol = 2;
    aelf.Hash lock_id = 3;
}

message GetLockedAmountOutput {
    aelf.Address address = 1;
    string symbol = 2;
    aelf.Hash lock_id = 3;
    sint64 amount = 4;
}

message TokenInfoList {
    repeated TokenInfo value = 1;
}

message GetCrossChainTransferTokenContractAddressInput {
    int32 chainId = 1;
}

message CrossChainCreateTokenInput {
    int32 from_chain_id = 1;
    int64 parent_chain_height = 2;
    bytes transaction_bytes = 3;
    aelf.MerklePath merkle_path = 4;
}

message InitializeInput {
    map<string, sint32> resource_amount = 1;
}

message CoefficientFromSender {
    sint32 piece_key = 1;
    bool is_change_piece_key = 2;
    bool is_liner = 3;
    LinerCoefficient liner_coefficient = 4;
    PowerCoefficient power_coefficient = 5;
    NewPieceKeyCoefficient new_piece_key_coefficient = 6;
}

message LinerCoefficient{
    sint32 numerator = 1;
    sint32 denominator = 2;
    sint32 constant_value = 3;
}

message PowerCoefficient{
    sint32 numerator = 1;
    sint32 denominator = 2;
    sint32 constant_value = 3;
    sint32 change_span_base = 4;
    sint32 weight = 5;
    sint32 weight_base = 6;
}

message NewPieceKeyCoefficient{
    sint32 new_piece_key = 1;
}

message CoefficientFromContract {
    FeeTypeEnum fee_type = 1;
    CoefficientFromSender coefficient = 2;
}
message TokenSymbolWithAddress{
    string token_symbol = 1;
    aelf.Address from_address = 2;
}

message TokenStateInAddress{
    bool value = 1;
}

message AddTokeWhiteListInput{
    string token_symbol = 1;
    aelf.Address address = 2;
}

enum FeeTypeEnum {
    READ = 0;
    STORAGE = 1;
    WRITE = 2;
    TRAFFIC = 3;
    TX = 4;
}

enum CalculateFunctionTypeEnum {
    LINER = 0;
    POWER = 1;
}

message CalculateFeeCoefficientsOfType{
    repeated CalculateFeeCoefficient coefficients= 1;
}

message CalculateFeeCoefficient {
    sint32 piece_key = 1;
    FeeTypeEnum fee_type = 2;
    CalculateFunctionTypeEnum function_type = 3;
    map<string, sint32> coefficient_dic = 4;
}

// Events

message Transferred {
    option (aelf.is_event) = true;
    aelf.Address from = 1 [(aelf.is_indexed) = true];
    aelf.Address to = 2 [(aelf.is_indexed) = true];
    string symbol = 3 [(aelf.is_indexed) = true];
    sint64 amount = 4;
    string memo = 5;
}

message Approved {
    option (aelf.is_event) = true;
    aelf.Address owner = 1 [(aelf.is_indexed) = true];
    aelf.Address spender = 2 [(aelf.is_indexed) = true];
    string symbol = 3 [(aelf.is_indexed) = true];
    sint64 amount = 4;
}

message UnApproved {
    option (aelf.is_event) = true;
    aelf.Address owner = 1 [(aelf.is_indexed) = true];
    aelf.Address spender = 2 [(aelf.is_indexed) = true];
    string symbol = 3 [(aelf.is_indexed) = true];
    sint64 amount = 4;
}

message Burned
{
    option (aelf.is_event) = true;
    aelf.Address burner = 1 [(aelf.is_indexed) = true];
    string symbol = 2 [(aelf.is_indexed) = true];
    sint64 amount = 3;
}

message ChainPrimaryTokenSymbolSet {
    option (aelf.is_event) = true;
    string token_symbol = 1;
}

message TransactionSizeFeeUnitPriceUpdated {
    option (aelf.is_event) = true;
    sint64 unit_price = 1;
}

message NoticeUpdateCalculateFeeAlgorithm {
    option (aelf.is_event) = true;
    CalculateFeeCoefficientsOfType all_coefficient = 1;
}

message RentalCharged {
    option (aelf.is_event) = true;
    string symbol = 1;
    sint64 amount = 2;
}

message RentalAccountBalanceInsufficient {
    option (aelf.is_event) = true;
    string symbol = 1;
    sint64 amount = 2;
}





